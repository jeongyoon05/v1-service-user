name: Build for Prod
on:
  push:
    tags:
      - v*.*.*

env:
  SERVICE_NAME: user
  SERVICE_TYPE: be

jobs:
  build:
    environment: prod
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java-version: [ 17 ]
    outputs:
      version: ${{ steps.get_version.outputs.BRANCH_NAME }}

    steps:
      - name: Check Out The Repository
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'zulu'

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Gradle Build
        uses: gradle/gradle-build-action@v2
        with:
          arguments: |
            build
            --no-daemon

      - name: Login to ECR
        id: ecr
        uses: elgohr/ecr-login-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY }}
          secret_access_key: ${{ secrets.AWS_SECRET_KEY }}
          region: ${{ secrets.AWS_REGION }}

      - name: Publish to Registry
        uses: elgohr/Publish-Docker-Github-Action@master
        with:
          name: ${{env.SERVICE_NAME}}-${{env.SERVICE_TYPE}}
          username: ${{ steps.ecr.outputs.username }}
          password: ${{ steps.ecr.outputs.password }}
          registry: ${{ steps.ecr.outputs.registry }}
          tags: ${{ steps.get_version.outputs.VERSION }}
          build-args: |
            DBMS=${{secrets.DBMS_PROD}}
            DB_HOST=${{secrets.DB_HOST_PROD}}
            DB_PORT=${{secrets.DB_PORT_PROD}}
            DB_NAME=${{secrets.DB_NAME_PROD}}
            DB_PASSWORD=${{secrets.DB_PASSWORD_PROD}}
            DB_USERNAME=${{secrets.DB_USERNAME_PROD}}
            SHOW_SQL=${{secrets.SHOW_SQL_PROD}}
            DDL_AUTO_MODE=${{secrets.DDL_AUTO_MODE_PROD}}
            DB_POOL=${{secrets.DB_POOL_PROD}}
            AUTHORITY_SERVICE_HOST=${{secrets.AUTHORITY_SERVICE_HOST}}
            APPLICATION_SERVICE_HOST=${{secrets.APPLICATION_SERVICE_HOST}}
            JWT_SECRET_KEY=${{secrets.JWT_SECRET_KEY_PROD}}
            JWT_ACCESS_TOKEN_EXP_AS_HOUR=${{secrets.JWT_ACCESS_TOKEN_EXP_AS_HOUR_PROD}}
            JWT_REFRESH_TOKEN_EXP_AS_HOUR=${{secrets.JWT_REFRESH_TOKEN_EXP_AS_HOUR_PROD}}
            REDIS_HOST=${{secrets.REDIS_HOST_PROD}}
            REDIS_PORT=${{secrets.REDIS_PORT_PROD}}
            REDIS_PASSWORD=${{secrets.REDIS_PASSWORD_PROD}}
            AUTHORITY_SERVICE_HOST=${{secrets.AUTHORITY_SERVICE_HOST_PROD}}
            APPLICATION_SERVICE_HOST=${{secrets.APPLICATION_SERVICE_HOST_PROD}}
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.GITOPS_DEPLOY_PRODUCTION_TOKEN }}
          repository: team-xquare/xquare-gitops-repo-production
          event-type: update_image
          client-payload: '{
                          "ref": "${{ github.ref }}",
                          "version":  "${{ steps.get_version.outputs.VERSION }}",
                          "service_name": "${{env.SERVICE_NAME}}",
                          "service_type": "${{env.SERVICE_TYPE}}"
                          }'
